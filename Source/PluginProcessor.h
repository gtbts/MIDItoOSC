/*
 ==============================================================================
 
 This file was auto-generated by the Introjucer!
 
 It contains the basic framework code for a JUCE plugin processor.
 
 ==============================================================================
 */

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#define IP_MTU_SIZE 1536

#include "../JuceLibraryCode/JuceHeader.h"
#include "oscpack/ip/UdpSocket.h"
#include "oscpack/osc/OscOutboundPacketStream.h"

//==============================================================================
/**
 */
class MiditoOscAudioProcessor  : public AudioProcessor
{
public:
    //==============================================================================
    MiditoOscAudioProcessor();
    ~MiditoOscAudioProcessor();
    
    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;
    
    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;
    
    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;
    
    //==============================================================================
    const String getName() const override;
    
    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;
    
    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;
    
    //==============================================================================
    int getPolyphonyValue() { return currentMaxPoly; }
    bool getMonoModeState() { return monoMode; }
    bool getShiftModeState() { return shiftMode; }
    void resetCount() { ch = gateCount = 0; }
    
    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;
    
    //==============================================================================
    void setOSCConnection (const juce::String address, const uint16_t port);
    void sendOSCData (const osc::OutboundPacketStream p);
    
    void sendGlideValue (const float glide);
    void sendScaleValue (const uint8_t scale);
    
    //==============================================================================
    float calibMap[128] = {};
    bool monoMode = false, shiftMode = false, calibMode = false;
    uint8_t currentMaxPoly = 1;
    
private:
    
    UdpSocket transmitSocket;
    
    enum parameters
    {
        Polyphony = 0,
        Glide = 1,
        Mono = 2,
        Shift = 3,
        Scale = 4,
        
        Linear = 0,
        Chromatic = 1,
        Major = 2,
        M7 = 3,
        Min7 = 4,
        Dorian = 5,
        Minor = 6,
        fifth = 7,
        Whole = 8,
        Calib = 9
    };
    
    int ch = 0, gateCount = 0;
    
    AudioParameterInt* polyphony;
    AudioParameterFloat* glide;
    AudioParameterBool* mono;
    AudioParameterBool* shift;
    AudioParameterInt* scale;
    
    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (MiditoOscAudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
